import textwrap
import re
import os
import json
import streamlit as st

st.set_page_config(page_title="Sistema Darcy Ribeiro", layout="centered")

st.markdown("# Seja bem-vindo ao Sistema Integrado Darcy Ribeiro!")
st.markdown("### üî¨ Conhe√ßa Departamentos, Institutos e Faculdades da Universidade de Bras√≠lia.")

# --- MENU LATERAL ---
menu = st.sidebar.radio("Menu", ["üîç Buscar por Instituto", "üîê Fazer Login", "üë®‚Äçüéì Ver Perfis"])

def exibir_historia_if():
    texto = textwrap.dedent("""
    <p>O Instituto de F√≠sica (IF) foi um dos primeiros institutos da Universidade de Bras√≠lia. Seu desenvolvimento contou com a participa√ß√£o de f√≠sicos como Jos√© Leite Lopes, Roberto Salmeron e Jayme Tiomno, al√©m do apoio do Centro Brasileiros de Pesquisas F√≠sicas (CBPF), que em diversas reuni√µes com Darcy Ribeiro e An√≠sio Teixeira, fundadores da UnB, definiram as diretrizes do curso.</p>

    <p>Ap√≥s o golpe militar de 1964, que causou a demiss√£o em massa de praticamente todo o corpo docente da UnB, coube a Jos√© Acioli, Luiz Carlos Gomes e Jos√© Carlos Azevedo a dif√≠cil miss√£o de reerguer o IF.</p>

    <p>Em um estudo recente realizado pela Universidade de Stanford, foi feito um levantamento de pesquisadores de todas as √°reas e a UnB teve 25 professores, sendo 2 do Instituto de F√≠sica, entre os melhores do mundo.</p>
    """)
    st.markdown(f"<div style='text-align: justify'>{texto}</div>", unsafe_allow_html=True)
	
def exibir_biografias():
    biografias = textwrap.dedent("""
    <p>Darcy Ribeiro - Al√©m de ter sido um dos principais fundadores da Universidade de Bras√≠lia, Darcy Ribeiro liderou o projeto da constru√ß√£o de quase 500 col√©gios p√∫blicos de ensino integral em todo o estado do Rio de Janeiro, os chamados CIEPs, entre 1983 e 1987, per√≠odo no qual foi vice-governador. Nesta mesma √©poca, criou o Samb√≥dromo, que n√£o s√≥ servia como espa√ßo para o desfile das escolas de samba durante o Carnaval, mas tamb√©m onde funcionavam mais de 200 salas de aula constru√≠das embaixo das arquibancadas. Logo ap√≥s a conclus√£o do curso de Antropologia, passou 10 anos convivendo com povos ind√≠genas, estudando especialmente os povos Kadiw√©u, Urubu Ka‚Äôapor, Ofay√©, Bororo e Guarani. Criou tamb√©m o Parque Ind√≠gena do Xingu, o Museu do √çndio e o Memorial da Am√©rica Latina. Foi preso e exilado durante a ditadura militar, tendo vivido por 12 anos entre o Uruguai, Venezuela, Chile, Peru e M√©xico. Nascido em 26 de Outubro de 1922 em Montes Claros, Minas Gerais, Darcy foi antrop√≥logo, educador, escritor e pol√≠tico.</p>

    <p>An√≠sio Teixeira - Considerado o fundador da primeira escola p√∫blica de ensino integral do Brasil, a Escola Parque inaugurada na Bahia em 1950, An√≠sio Teixeira foi um dos idealizadores da Escola Nova, movimento educacional de grande proje√ß√£o no s√©culo XX, que propunha que a ''educa√ß√£o deve ser essencialmente p√∫blica, obrigat√≥ria, gratuita, leiga e sem qualquer segrega√ß√£o de cor, sexo ou tipo de estudo, e desenvolver-se em estreita vincula√ß√£o com as comunidades.'' Ao lado de Darcy Ribeiro, contribuiu n√£o s√≥ no projeto da Universidade de Bras√≠lia, mas tamb√©m na elabora√ß√£o da Lei de Diretrizes e Bases da Educa√ß√£o. An√≠sio Teixeira nasceu em Caetit√©, na Bahia, em 12 de Julho de 1900.</p>

    <p>Jos√© Leite Lopes - Foi o primeiro f√≠sico a predizer a exist√™ncia do b√≥son Z, part√≠cula mediadora de uma das quatro for√ßas fundamentais da natureza, a for√ßa fraca. Ao lado de C√©sar Lattes, ajudou a construir o CBPF, um dos principais centros de pesquisa em f√≠sica do pa√≠s e que abrigou f√≠sicos como Jayme Tiomno, M√°rio Schenberg, Richard Feynman e David Bohm. Nasceu em Recife, Pernambuco, em 28 de Outubro de 1918.</p>

    <p>Roberto Salmeron - Em colabora√ß√£o com o CERN, esteve na primeira detec√ß√£o dos neutrinos do el√©tron e do m√∫on, part√≠culas fundamentais do Modelo Padr√£o. Teve uma importante participa√ß√£o nos anos iniciais da UnB como diretor do Instituto Central de Ci√™ncias (ICC), do qual faziam parte os institutos de F√≠sica, Qu√≠mica e Biologia e o departamento de Matem√°tica. Salmeron nasceu em 16 de Julho de 1922, em S√£o Paulo.</p>
    """)
    st.markdown(f"<div style='text-align: justify'>{biografias}</div>", unsafe_allow_html=True)

def exibir_nucleos():
    nucleos = {
        "nucleo_1": "1. F√≠sica At√¥mica e Molecular",
        "nucleo_2": "2. Relatividade Geral, Gravita√ß√£o e Cosmologia",
        "nucleo_3": "3. Mat√©ria Condensada Experimental",
        "nucleo_4": "4. Mat√©ria Condensada Te√≥rica",
        "nucleo_5": "5. F√≠sica Matem√°tica e Computacional",
        "nucleo_6": "6. Teoria Qu√¢ntica de Campos",
        "nucleo_7": "7. √ìptica Qu√¢ntica",
        "nucleo_8": "8. F√≠sica de Plasma",
        "nucleo_9": "9. F√≠sica Estat√≠stica e Computacional",
        "nucleo_10": "10. F√≠sica Geral e Fundamentos da F√≠sica",
        "nucleo_11": "11. Ensino de F√≠sica"
    }

    opcoes = list(nucleos.values())
    escolha = st.selectbox("Escolha um n√∫cleo:", opcoes, key="selectbox_nucleos")

    for chave, valor in nucleos.items():
        if valor == escolha:
            return chave

def exibir_professores_otica():
	profs = ["1. Alexandre Dodonov", "2. Caio Ribeiro"]
	escolha = st.selectbox("Escolha um professor:", profs)
	return escolha.lower()
	
def info_caio_ribeiro():
    st.markdown("### üìö Informa√ß√µes sobre Caio Ribeiro")
    st.markdown("- **Contato:** caio.ribeiro@unb.br")
    st.markdown("- **Lattes:** http://lattes.cnpq.br/6459107436866263")
    st.markdown("- **Google Scholar:** https://scholar.google.com/citations?user=mR3sBh0AAAAJ&hl=pt-BR&oi=ao")

    st.markdown("#### Artigos Recentes")
    st.markdown("- *Electric current quantum superpositions in superconducting circuits* (Physics Letters A, 2025) (https://www.sciencedirect.com/science/article/abs/pii/S0375960125003792)")
    st.markdown("- *Probing cosmic expansion through small anisotropies in a Bose-Einstein condensate analogue* (arXiv, 2025) (https://arxiv.org/abs/2504.21236)")
    st.markdown("- *Energy conservation and quantum backreaction in Bose-Einstein condensates* (Physical Review A, 2025) (https://journals.aps.org/pra/abstract/10.1103/PhysRevA.111.023306)")

    st.markdown("#### Linhas de Pesquisa")
    st.markdown("- **V√°cuo qu√¢ntico em condensados de Bose-Einstein**")
    descricao1 = textwrap.dedent("""
    Descri√ß√£o: Neste projeto buscamos estudar manifesta√ß√µes do v√°cuo qu√¢ntico em condensados de Bose-Einstein, sistemas que ocupam posi√ß√£o estrat√©gica na ci√™ncia e no ensino de ci√™ncia por suas propriedades peculiares e seu car√°ter multidisciplinar.

    De forma espec√≠fica, estamos interessados em estudar o backreaction qu√¢ntico em sistemas an√°logos e nas modifica√ß√µes oriundas de intera√ß√µes de longo alcance, como, por exemplo, ocorre quando os b√≥sons possuem momento de dipolo el√©trico ou magn√©tico.
    """)
    st.markdown(f"<div style='text-align: justify'>{descricao1}</div>", unsafe_allow_html=True)

    st.markdown("- **Flutua√ß√µes do v√°cuo em sistemas do tipo Casimir**")  
    descricao2 = textwrap.dedent("""
    Descri√ß√£o: Em distin√ß√£o √† concep√ß√£o cl√°ssica de v√°cuo, a modifica√ß√£o do estado de v√°cuo de algum campo qu√¢ntico produz efeitos observ√°veis, como por exemplo o celebrado efeito Casimir.

    Neste projeto propomos estudar o efeito Browniano qu√¢ntico em sistemas do tipo Casimir, no qual part√≠culas que interagem com o campo adquirem dispers√£o em suas velocidades devido a transi√ß√µes entre estados de v√°cuo.
    """)
    st.markdown(f"<div style='text-align: justify'>{descricao2}</div>", unsafe_allow_html=True)

    st.markdown("#### Grupo de Pesquisa")
    doutorado = ["Miguel Citeli", "Giulia Aleixo"]
    mestrado = ["Patrick Oliveira", "Carine Zary"]
    graduacao = [
        "Roger Rezende Pinheiro Marzagao",
        "Vit√≥ria Alves de Souza",
        "Hugo Diniz de Souza"
    ]

    # Tenta carregar os perfis
    try:
        with open("perfis_caio.json", "r") as f:
            alunos = json.load(f)
    except Exception as e:
        st.error(f"Erro ao carregar perfis: {e}")
        alunos = []

    def exibir_por_nivel(titulo, nomes):
        st.markdown(f"##### {titulo}")
        for aluno in alunos:
            if aluno["nome"] in nomes:
                col1, col2 = st.columns([1, 5])
                with col1:
                    try:
                        st.image(aluno["foto"], width=80)
                    except:
                        st.warning("Foto n√£o dispon√≠vel.")

                with col2:
                    st.markdown(f"**{aluno['nome']}**")
                    st.markdown(f"*Tema:* {aluno['tema']}")

    exibir_por_nivel("Doutorado", doutorado)
    exibir_por_nivel("Mestrado", mestrado)
    exibir_por_nivel("Gradua√ß√£o", graduacao)
	
def criar_perfil(nome_usuario):
    st.subheader("Cria√ß√£o de Perfil")

    nivel = st.selectbox("N√≠vel", ["Gradua√ß√£o", "Mestrado", "Doutorado"])
    tema = st.text_input("Tema da Pesquisa")
    #instituicao = st.text_input("Institui√ß√£o (opcional)")
    #ano = st.text_input("Ano de Ingresso (opcional)")

    if st.button("Criar Perfil", key="botao_criar"):
        perfil = {
            "nome": nome_usuario,
            "tema": tema
        }

        if not os.path.exists("perfis_caio.json"):
            with open("perfis_caio.json", "w") as f:
                json.dump([], f)

        with open("perfis_caio.json", "r") as f:
            try:
                perfis = json.load(f)
            except json.JSONDecodeError:
                perfis = []

        if any(p["nome"] == nome_usuario for p in perfis):
            st.warning("J√° existe um perfil com este nome.")
        else:
            perfis.append(perfil)

            with open("perfis_caio.json", "w") as f:
                json.dump(perfis, f, indent=2, ensure_ascii=False)

            st.success("Perfil criado com sucesso!")

def login(matricula, senha):
    if not os.path.exists("usuarios.json"):
        return None

    with open("usuarios.json", "r") as f:
        usuarios = json.load(f)

    for usuario in usuarios:
        if usuario["matricula"] == matricula and usuario["senha"] == senha:
            return usuario["nome"]
    return None

def carregar_perfis(arquivo="perfis_caio.json"):
    if os.path.exists(arquivo):
        with open(arquivo, "r") as f:
            try:
                perfis = json.load(f)
            except json.JSONDecodeError:
                st.warning("Erro ao carregar os perfis.")
                return

        if perfis:
            for p in perfis:
                st.markdown("---")
                st.markdown(f"**üë§ Nome:** {p.get('nome', 'N/A')}")
                st.markdown(f"- **Tema da Pesquisa:** {p.get('tema', 'N/A')}")
                for chave, valor in p.items():
                    if chave not in ["nome", "tema"]:
                        st.markdown(f"- **{chave}:** {valor}")
        else:
            st.info("Nenhum perfil cadastrado ainda.")
    else:
        st.info("Nenhum perfil cadastrado ainda.")

# --- OP√á√ÉO 1: BUSCAR POR INSTITUTO ---
if menu == "üîç Buscar por Instituto":
    if "busca_realizada" not in st.session_state:
        st.session_state.busca_realizada = False
    
    consulta = st.text_input("Digite algo como 'f√≠sica', 'if', 'qu√≠mica'...").strip().lower()
    palavras_chave = ["if", "f√≠sica", "fisica", "instituto de f√≠sica"]
    
    if st.button("Buscar"):
        st.session_state.busca_realizada = any(p in consulta for p in palavras_chave)
    
    if st.session_state.busca_realizada:
        st.markdown("### Site Oficial do IF")
        st.markdown("https://if.unb.br/")
        st.markdown("### Hist√≥ria do Instituto de F√≠sica")
        exibir_historia_if()
        st.markdown("### Biografias Selecionadas")
        exibir_biografias()
        st.markdown("### √Åreas de Pesquisa")

        if "nucleo_escolhido" not in st.session_state:
            st.session_state.nucleo_escolhido = ""

        st.session_state.nucleo_escolhido = exibir_nucleos()

        if st.session_state.nucleo_escolhido and st.session_state.nucleo_escolhido != "nucleo_7":
            st.info("Ainda n√£o existem professores cadastrados para este n√∫cleo.")

        if st.session_state.nucleo_escolhido == "nucleo_7":
            st.markdown("### Professores do n√∫cleo de √ìptica Qu√¢ntica")

            if "professor_escolhido" not in st.session_state:
                st.session_state.professor_escolhido = ""

            st.session_state.professor_escolhido = exibir_professores_otica()

            if "caio" in st.session_state.professor_escolhido:
                info_caio_ribeiro()

            elif "alexandre" in st.session_state.professor_escolhido:
                st.info("Informa√ß√µes de Alexandre Dodonov ainda n√£o dispon√≠veis.")

            else:
                st.warning("Professor n√£o encontrado.")

# --- OP√á√ÉO 2: LOGIN E CRIA√á√ÉO DE PERFIL ---
elif menu == "üîê Fazer Login":
    st.subheader("Login para cria√ß√£o de perfil no grupo de pesquisa")

    if "usuario_logado" not in st.session_state:
        st.session_state.usuario_logado = None

    if st.session_state.usuario_logado is None:

        aba = st.radio("Escolha uma op√ß√£o:", ["üîê Entrar", "üìã Fazer Cadastro"], horizontal=True)

        if aba == "üîê Entrar":
            matricula = st.text_input("Matr√≠cula")
            senha = st.text_input("Senha", type="password")

            if st.button("Entrar"):
                nome = login(matricula, senha)
                if nome:
                    st.session_state.usuario_logado = nome
                    st.success(f"Bem-vindo(a), {nome}!")
                    st.experimental_rerun()
                else:
                    st.error("Matr√≠cula ou senha incorretas.")

        elif aba == "üìã Fazer Cadastro":
            nome = st.text_input("Nome Completo")
            nova_matricula = st.text_input("Matr√≠cula")
            nova_senha = st.text_input("Senha", type="password")
            confirmar_senha = st.text_input("Confirmar Senha", type="password")

            if st.button("Cadastrar"):
                if not nome or not nova_matricula or not nova_senha or not confirmar_senha:
                    st.warning("Preencha todos os campos para cadastrar.")
                elif nova_senha != confirmar_senha:
                    st.error("As senhas n√£o coincidem. Tente novamente.")
                else:
                    novo_usuario = {
                        "nome": nome,
                        "matricula": nova_matricula,
                        "senha": nova_senha
                    }

                    caminho_usuarios = "usuarios.json"
                    if os.path.exists(caminho_usuarios):
                        with open(caminho_usuarios, "r") as f:
                            try:
                                usuarios = json.load(f)
                            except json.JSONDecodeError:
                                usuarios = []
                    else:
                        usuarios = []

                    if any(u["matricula"] == nova_matricula for u in usuarios):
                        st.warning("J√° existe um usu√°rio com essa matr√≠cula.")
                    else:
                        usuarios.append(novo_usuario)

                        try:
                            with open(caminho_usuarios, "w") as f:
                                json.dump(usuarios, f, indent=2, ensure_ascii=False)
                            st.success("Cadastro realizado com sucesso! Agora fa√ßa login.")
                            st.write("‚úÖ Usu√°rio salvo no arquivo!")
                        except Exception as e:
                            st.error(f"Erro ao salvar: {e}")

# --- OP√á√ÉO 3: VER TODOS OS PERFIS CADASTRADOS ---
elif menu == "üë®‚Äçüéì Ver Perfis":
    st.subheader("Perfis do Grupo de Pesquisa do Prof. Caio Ribeiro")
    carregar_perfis()
